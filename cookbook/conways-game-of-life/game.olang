#!/usr/bin/env olang

# Still lifes
var BLOCK = [
    [false false false false]
    [false true  true  false]
    [false true  true  false]
    [false false false false]
]

var BEEHIVE = [
    [false false false false false false]
    [false false true  true  false false]
    [false true  false false true  false]
    [false false true  true  false false]
    [false false false false false false]
]

var LOAF = [
    [false false false false false false]
    [false false true  true  false false]
    [false true  false false true  false]
    [false false true  false true  false]
    [false false false true  false false]
    [false false false false false false]
]

var BOAT = [
    [false false false false false]
    [false true  true  false false]
    [false true  false true  false]
    [false false true  false false]
    [false false false false false]
]

var TUB = [
    [false false false false false]
    [false false true  false false]
    [false true  false true  false]
    [false false true  false false]
    [false false false false false]
]

# Oscillators
var BLINKER = [
    [false false false false false]
    [false false true  false false]
    [false false true  false false]
    [false false true  false false]
    [false false false false false]
]

var TOAD = [
    [false false false false false false]
    [false false false false false false]
    [false false true  true  true  false]
    [false true  true  true  false false]
    [false false false false false false]
    [false false false false false false]
]

var BEACON = [
    [false false false false false false]
    [false true  true  false false false]
    [false true  false false false false]
    [false false false false true  false]
    [false false false true  true  false]
    [false false false false false false]
]

# Spaceships
var GLIDER = [
    [false true  false false false false false false false false]
    [false false true  false false false false false false false]
    [true  true  true  false false false false false false false]
    [false false false false false false false false false false]
    [false false false false false false false false false false]
    [false false false false false false false false false false]
    [false false false false false false false false false false]
    [false false false false false false false false false false]
    [false false false false false false false false false false]
    [false false false false false false false false false false]
]

var LWSS = [
    [false false false false false false false false false false false false false false false false false false false false]
    [false false false false false false false false false false false false false false false false false false false false]
    [false true  true  true  true  false false false false false false false false false false false false false false false]
    [true  false false false true  false false false false false false false false false false false false false false false]
    [false false false false true  false false false false false false false false false false false false false false false]
    [true  false false true  false false false false false false false false false false false false false false false false]
]

var MWSS = [
    [false false false false false false false false false false false false false false false false false false false false]
    [false false false false false false false false false false false false false false false false false false false false]
    [false true  true  true  true  true  false false false false false false false false false false false false false false]
    [true  false false false false true  false false false false false false false false false false false false false false]
    [false false false false false true  false false false false false false false false false false false false false false]
    [true  false false false true  false false false false false false false false false false false false false false false]
    [false false true  false false false false false false false false false false false false false false false false false]
]

printLn("Pick a starting grid:
    Still lifes:
        1  - Block
        2  - Beehive
        3  - Loaf
        4  - Boat
        5  - Tub
    Oscillators:
        10 - Blinker
        11 - Toad
        12 - Beacon
    Spaceships:
        20 - Glider
        21 - Light-weight spaceship
        22 - Middle-weight spaceship")

var input = readLn()
var grid = if input == "1" {
    BLOCK
} elif input == "2" {
    BEEHIVE
} elif input == "3" {
    LOAF
} elif input == "4" {
    BOAT
} elif input == "5" {
    TUB
} elif input == "10" {
    BLINKER
} elif input == "11" {
    TOAD
} elif input == "12" {
    BEACON
} elif input == "20" {
    GLIDER
} elif input == "21" {
    LWSS
} elif input == "22" {
    MWSS
}

var gridRows = len(grid)
var gridCols = len(grid.0)

var formatGrid = fun() {
    var output = ""

    for var row = 0  row < gridRows  row+=2 {
        for var col = 0  col < gridCols  col++ {
            output += if row != gridRows-1 {
                if grid.row.col && grid.(row+1).col {
                    "█"
                } elif grid.row.col && grid.(row+1).col == false {
                    "▀"
                } elif grid.row.col == false && grid.(row+1).col {
                    "▄"
                } else {
                    " "
                }
            } else {
                if grid.row.col {
                    "▀"
                } else {
                    " "
                }
            }

            # if grid.row.col {
            #     output += "█"
            # } else {
            #     output += "  "
            # }
        }
        output += "\n"
    }

    output
}

var getNeighboursRow = fun(row col countCenter) {
    var result = 0

    if col != 0 {
        if grid.row.(col-1) {
            result++
        }
    } else {
        if grid.row.(gridCols-1) {
            result++
        }
    }
    if countCenter {
        if grid.row.col {
            result++
        }
    }
    if col != gridCols-1 {
        if grid.row.(col+1) {
            result++
        }
    } else {
        if grid.row.0 {
            result++
        }
    }

    result
}

var getNeighbours = fun(row col) {
    var result = 0

    if row != 0 {
        result += getNeighboursRow(row-1 col true)
    } else {
        result += getNeighboursRow(gridRows-1 col true)
    }
    result += getNeighboursRow(row col false)
    if row != gridRows-1 {
        result += getNeighboursRow(row+1 col true)
    } else {
        result += getNeighboursRow(0 col true)
    }

    result
}

var generation = fun() {
    var newGrid = []

    for var row = 0  row < gridRows  row++ {
        var rowList = []

        for var col = 0  col < gridCols  col++ {
            var neighbours = getNeighbours(row col)
            var living = grid.row.col
            var survive = (neighbours == 2 && living) || neighbours == 3

            rowList += survive
        }

        newGrid += rowList
    }

    grid = newGrid
}

printLn(formatGrid())

loop {
    generation()
    printLn(formatGrid())
    sleep(100)
}
