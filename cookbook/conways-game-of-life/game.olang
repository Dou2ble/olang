#!/usr/bin/env olang

var grid = []
var gridRows = 0
var gridCols = 0
var padding = 5

# https://conwaylife.com/wiki/Plaintext
var parsePlaintext = fun() {
    var parsedGrid = []

    # parse from stdin
    loop {
        var input = readLn()

        # The end of the input
        if len(input) == 0 {
            break
        }

        # plaintext comment
        if input.0 == "!" {
            continue
        }

        var row = []
        for var i = 0  i < len(input)  i++ {
            row += input.i == "O"
        }
        parsedGrid += row
    }

    var parsedGridRows = len(parsedGrid)
    var parsedGridCols = len(parsedGrid.0)

    for var i = 0  i < padding  i++ {
        var row = []
        for var col = 0  col < parsedGridCols + padding*2  col++ {
            row += false
        }
        grid += row
    }

    for var rowIndex = 0 rowIndex < parsedGridRows  rowIndex++ {
        var row = []
        for var i = 0  i < padding  i++ {
            row += false
        }
        for var col = 0  col < parsedGridCols  col++ {
            row += parsedGrid.rowIndex.col
        }
        for var i = 0  i < padding  i++ {
            row += false
        }
        grid += row
    }

    for var i = 0  i < padding  i++ {
        var row = []
        for var col = 0  col < parsedGridCols + padding*2  col++ {
            row += false
        }
        grid += row
    }

    gridRows = len(grid)
    gridCols = len(grid.0)
}

printLn("Paste in plaintext formatted game of life grid")
printLn("https://conwaylife.com/wiki/Plaintext")
parsePlaintext()


var formatGrid = fun() {
    var output = ""

    for var row = 0  row < gridRows  row+=2 {
        for var col = 0  col < gridCols  col++ {
            output += if row != gridRows-1 {
                if grid.row.col && grid.(row+1).col {
                    "█"
                } elif grid.row.col && grid.(row+1).col == false {
                    "▀"
                } elif grid.row.col == false && grid.(row+1).col {
                    "▄"
                } else {
                    " "
                }
            } else {
                if grid.row.col {
                    "▀"
                } else {
                    " "
                }
            }
        }
        output += "\n"
    }

    output
}

var getNeighboursRow = fun(row col countCenter) {
    var result = 0

    if col != 0 {
        if grid.row.(col-1) {
            result++
        }
    }
    if countCenter {
        if grid.row.col {
            result++
        }
    }
    if col != gridCols-1 {
        if grid.row.(col+1) {
            result++
        }
    }

    result
}

var getNeighbours = fun(row col) {
    var result = 0

    if row != 0 {
        result += getNeighboursRow(row-1 col true)
    }
    result += getNeighboursRow(row col false)
    if row != gridRows-1 {
        result += getNeighboursRow(row+1 col true)
    }

    result
}

var generation = fun() {
    var newGrid = []

    for var row = 0  row < gridRows  row++ {
        var rowList = []

        for var col = 0  col < gridCols  col++ {
            var neighbours = getNeighbours(row col)
            var living = grid.row.col
            var survive = (neighbours == 2 && living) || neighbours == 3

            rowList += survive
        }

        newGrid += rowList
    }

    grid = newGrid
}

printLn(formatGrid())

loop {
    generation()
    printLn(formatGrid())
}
